import { ApplicationRef } from '@angular/core';
import { AnyAction, StoreEnhancer } from 'redux';
import { EnhancerOptions } from 'redux-devtools-extension';
import { NgRedux } from './ng-redux';
import * as ɵngcc0 from '@angular/core';
export interface ReduxDevTools {
    (options: EnhancerOptions): StoreEnhancer<any>;
    listen: (onMessage: (message: AnyAction) => void, instanceId?: string) => void;
}
/**
 * An angular-2-ified version of the Redux DevTools chrome extension.
 */
export declare class DevToolsExtension {
    private appRef;
    private ngRedux;
    /** @hidden */
    constructor(appRef: ApplicationRef, ngRedux: NgRedux<any>);
    /**
     * A wrapper for the Chrome Extension Redux DevTools.
     * Makes sure state changes triggered by the extension
     * trigger Angular2's change detector.
     *
     * @argument options: dev tool options; same
     * format as described here:
     * [zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md]
     */
    enhancer: (options?: EnhancerOptions) => StoreEnhancer<any, {}>;
    /**
     * Returns true if the extension is installed and enabled.
     */
    isEnabled: () => boolean;
    /**
     * Returns the redux devtools enhancer.
     */
    getDevTools: () => ReduxDevTools;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DevToolsExtension, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DevToolsExtension>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2LXRvb2xzLmQudHMiLCJzb3VyY2VzIjpbImRldi10b29scy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW55QWN0aW9uLCBTdG9yZUVuaGFuY2VyIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgRW5oYW5jZXJPcHRpb25zIH0gZnJvbSAncmVkdXgtZGV2dG9vbHMtZXh0ZW5zaW9uJztcbmltcG9ydCB7IE5nUmVkdXggfSBmcm9tICcuL25nLXJlZHV4JztcbmV4cG9ydCBpbnRlcmZhY2UgUmVkdXhEZXZUb29scyB7XG4gICAgKG9wdGlvbnM6IEVuaGFuY2VyT3B0aW9ucyk6IFN0b3JlRW5oYW5jZXI8YW55PjtcbiAgICBsaXN0ZW46IChvbk1lc3NhZ2U6IChtZXNzYWdlOiBBbnlBY3Rpb24pID0+IHZvaWQsIGluc3RhbmNlSWQ/OiBzdHJpbmcpID0+IHZvaWQ7XG59XG4vKipcbiAqIEFuIGFuZ3VsYXItMi1pZmllZCB2ZXJzaW9uIG9mIHRoZSBSZWR1eCBEZXZUb29scyBjaHJvbWUgZXh0ZW5zaW9uLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEZXZUb29sc0V4dGVuc2lvbiB7XG4gICAgcHJpdmF0ZSBhcHBSZWY7XG4gICAgcHJpdmF0ZSBuZ1JlZHV4O1xuICAgIC8qKiBAaGlkZGVuICovXG4gICAgY29uc3RydWN0b3IoYXBwUmVmOiBBcHBsaWNhdGlvblJlZiwgbmdSZWR1eDogTmdSZWR1eDxhbnk+KTtcbiAgICAvKipcbiAgICAgKiBBIHdyYXBwZXIgZm9yIHRoZSBDaHJvbWUgRXh0ZW5zaW9uIFJlZHV4IERldlRvb2xzLlxuICAgICAqIE1ha2VzIHN1cmUgc3RhdGUgY2hhbmdlcyB0cmlnZ2VyZWQgYnkgdGhlIGV4dGVuc2lvblxuICAgICAqIHRyaWdnZXIgQW5ndWxhcjIncyBjaGFuZ2UgZGV0ZWN0b3IuXG4gICAgICpcbiAgICAgKiBAYXJndW1lbnQgb3B0aW9uczogZGV2IHRvb2wgb3B0aW9uczsgc2FtZVxuICAgICAqIGZvcm1hdCBhcyBkZXNjcmliZWQgaGVyZTpcbiAgICAgKiBbemFsbW94aXN1cy9yZWR1eC1kZXZ0b29scy1leHRlbnNpb24vYmxvYi9tYXN0ZXIvZG9jcy9BUEkvQXJndW1lbnRzLm1kXVxuICAgICAqL1xuICAgIGVuaGFuY2VyOiAob3B0aW9ucz86IEVuaGFuY2VyT3B0aW9ucykgPT4gU3RvcmVFbmhhbmNlcjxhbnksIHt9PjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGV4dGVuc2lvbiBpcyBpbnN0YWxsZWQgYW5kIGVuYWJsZWQuXG4gICAgICovXG4gICAgaXNFbmFibGVkOiAoKSA9PiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJlZHV4IGRldnRvb2xzIGVuaGFuY2VyLlxuICAgICAqL1xuICAgIGdldERldlRvb2xzOiAoKSA9PiBSZWR1eERldlRvb2xzO1xufVxuIl19